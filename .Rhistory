library(tidyverse)
library(readxl)
library(janitor)
library(stringr)
library(ggridges)
library(ggthemes)
library(forcats)
library(viridis)
library(plotly)
library(shiny)
library(httr)
library(jsonlite)
hospital_data_regions <- read_csv(file = "../data/Hospital_General_Information.csv", col_names = TRUE) %>%
clean_names() %>%
mutate(region = ifelse(grepl("ME|NH|VT|MA|RI|CT", state), "New England", ifelse(grepl("NY|PA|NJ", state), "Middle Atlantic", ifelse(grepl("WI|MI|IL|IN|OH", state), "East North Central", ifelse(grepl("ND|SD|NE|KS|MN|IA|MO", state), "West North Central", ifelse(grepl("DE|MD|DC|VA|WV|NC|SC|GA|FL", state), "South Atlantic", ifelse(grepl("KY|TN|MS|AL", state), "East South Central", ifelse(grepl("OK|TX|AR|LA", state), "West South Central", ifelse(grepl("ID|MT|WY|NV|UT|CO|AZ|NM", state), "Mountain", ifelse(grepl("AK|WA|OR|CA|HI", state), "Pacific", "U.S. Territories"))))))))))
library(tidyverse)
library(readxl)
library(janitor)
library(stringr)
library(ggridges)
library(ggthemes)
library(forcats)
library(viridis)
library(plotly)
library(shiny)
library(httr)
library(jsonlite)
hospital_data_regions <- read_csv(file = "./data/Hospital_General_Information.csv", col_names = TRUE) %>%
clean_names() %>%
mutate(region = ifelse(grepl("ME|NH|VT|MA|RI|CT", state), "New England", ifelse(grepl("NY|PA|NJ", state), "Middle Atlantic", ifelse(grepl("WI|MI|IL|IN|OH", state), "East North Central", ifelse(grepl("ND|SD|NE|KS|MN|IA|MO", state), "West North Central", ifelse(grepl("DE|MD|DC|VA|WV|NC|SC|GA|FL", state), "South Atlantic", ifelse(grepl("KY|TN|MS|AL", state), "East South Central", ifelse(grepl("OK|TX|AR|LA", state), "West South Central", ifelse(grepl("ID|MT|WY|NV|UT|CO|AZ|NM", state), "Mountain", ifelse(grepl("AK|WA|OR|CA|HI", state), "Pacific", "U.S. Territories"))))))))))
hospital_data = read_csv(file = "./data/Hospital_General_Information.csv", col_names = TRUE) %>%
clean_names() %>%
select(provider_id,hospital_name,city,state,zip_code,hospital_type,hospital_ownership,hospital_overall_rating,patient_experience_national_comparison,location) %>%
mutate(hospital_overall_rating = as.numeric(hospital_overall_rating)) %>%
filter(!is.na(hospital_overall_rating)) %>%
separate(location, into = c("address", "coordinates"), sep = "\\(") %>%
mutate(coordinates = str_sub(coordinates, 1, -2)) %>%
filter(!is.na(coordinates)) %>%
separate(coordinates, into = c("Latitudes", "Longitudes"), sep = ",")
hospital_data2 <- hospital_data %>% mutate(longitude = as.numeric(Longitudes), latitude = as.numeric(Latitudes))
hospital_5<- filter(hospital_data2, hospital_overall_rating == "5")
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot_geo(df, lat = ~lat, lon = ~long) %>%
add_markers(
text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
) %>%
colorbar(title = "Incoming flights<br />February 2011") %>%
layout(
title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
# geo styling
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
add_markers(
text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
) %>%
colorbar(title = "Incoming flights<br />February 2011") %>%
layout(
title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
)
plot_geo(df, lat = ~lat, lon = ~long) %>%
add_markers(
text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
) %>%
colorbar(title = "Incoming flights<br />February 2011") %>%
layout(
title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
)
plot_geo(df, lat = ~lat, lon = ~long, text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />")) %>%
colorbar(title = "Incoming flights<br />February 2011") %>%
layout(
title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
)
library(flexdashboard)
library(tidyverse)
library(readxl)
library(janitor)
library(stringr)
library(ggridges)
library(ggthemes)
library(forcats)
library(viridis)
library(plotly)
library(shiny)
library(httr)
library(jsonlite)
hospital_data <- read_csv(file = "./data/Hospital_General_Information.csv", col_names = TRUE) %>%
clean_names() %>%
select(-address) %>%
mutate(hospital_overall_rating = as.numeric(hospital_overall_rating)) %>%
filter(!is.na(hospital_overall_rating)) %>%
separate(location, into = c("address", "coordinates"), sep = "\\(") %>%
mutate(coordinates = str_sub(coordinates, 1, -2)) %>%
filter(!is.na(coordinates)) %>%
separate(coordinates, into = c("latitude", "longitude"), sep = ",") %>%
mutate(latitude = as.numeric(latitude), longitude = as.numeric(longitude))
star_choice <- hospital_data %>%
distinct(hospital_overall_rating) %>% arrange(desc(hospital_overall_rating))
# selectInput widget
shiny::selectInput("star_choice", label = h3("Select Star"),
choices = star_choice, selected = "5")
renderPlotly({
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
filter(hospital_data, hospital_overall_rating == input$star_choice) %>%
plot_geo(lat = ~latitude, lon = ~longitude, text = ~paste(hospital_name, city, state, sep = "<br />")) %>%
layout(title = 'Hospital Rankings/>(Hover for Hospital)', geo = g)
})
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)
library(plotly)
library(httr)
library(jsonlite)
get_all_inspections <- function(url) {
all_inspections = vector("list", length = 0)
loop_index = 1
chunk_size = 50000
DO_NEXT = TRUE
while (DO_NEXT) {
message("Getting data, page ", loop_index)
all_inspections[[loop_index]] =
GET(url,
query = list(`$order` = "zipcode",
`$limit` = chunk_size,
`$offset` = as.integer((loop_index - 1) * chunk_size)
)
) %>%
content("text") %>%
fromJSON() %>%
as_tibble()
DO_NEXT = dim(all_inspections[[loop_index]])[1] == chunk_size
loop_index = loop_index + 1
}
all_inspections
}
url = "https://data.cityofnewyork.us/resource/9w7m-hzhe.json"
nyc_restaurant_inspections <- get_all_inspections(url) %>%
bind_rows() %>%
rename(restaurant_id = camis, restaurant_name = dba) %>%
mutate(cuisine_description = if_else(cuisine_description == "CafÃ©/Coffee/Tea", "Cafe/coffee", cuisine_description),
cuisine_description = if_else(cuisine_description == "Latin (Cuban, Dominican, Puerto Rican, South & Central American)", "Latin", cuisine_description)) %>%
mutate(score = as.numeric(score),
grade_new = case_when(
score < 14 ~ "A",
score >= 14 & score < 28 ~ "B",
score >= 28 ~ "C")) %>%
filter(is.na(grade) == FALSE)
nyc_restaurant_inspections %>%
filter(grade_new %in% c("A", "B", "C")) %>%
select(cuisine_description, grade_new) %>%
group_by(cuisine_description) %>%
count(grade_new) %>%
spread(key = grade_new, value = n)
test<-nyc_restaurant_inspections %>%
filter(grade_new %in% c("A", "B", "C")) %>%
select(cuisine_description, grade_new) %>%
group_by(cuisine_description) %>%
count(grade_new) %>%
spread(key = grade_new, value = n)
View(test)
library(devtools)
library(rsconnect)
deployApp()
